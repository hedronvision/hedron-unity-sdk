# Don't ignore Unity's autogenerated metadata files.
#
# If you're seeing this file because you're inspecting the package after you've
# installed it - check out the repository at [1]. :)
#
# Not familiar with `.gitignore`? See [2].
#
# Don't clone this file if you're looking for a .gitignore appropriate for Unity
# *projects*. For that, use [3].
#
# [1]: https://github.com/hedronvision/hedron-unity-sdk
# [2]: https://git-scm.com/docs/gitignore
# [3]: https://github.com/github/gitignore/blob/master/Unity.gitignore

# Reinclude any file (or directory) that ends in `.meta`.
#
# Although we usually think of `.meta` files as Unity-managed, for a Unity
# package these files _must_ be in version control for the package to be git-
# installable... even though you _shouldn't_ have to need them if the package is
# pure C# and doesn't reference itself (i.e. with assets) at all. It's possible
# that Unity will update the package manager in the future to handle meta-less
# remote packages, which would be quite nice. As it stands, we risk our assets
# having a conflicting GUID (although really, really unlikely) with a GUID in
# the project that's importing this package.
#
# See discussion at [4]. For a general review of meta files in version control,
# see [5] - a bit old, but still full of great concepts.
#
# [4]: https://forum.unity.com/threads/should-i-ship-my-packages-with-meta-files.789416/
# [5]: https://www.forrestthewoods.com/blog/managing_meta_files_in_unity/
!*.meta
